class TreeNode {

	constructor(val, watsonParams) {
		this.depth = this.extractDepth(val);
		this.position = this.extractPos(val);
		this.val = this.extractVal(val);
		this.parent = null;
		this.left = null;
		this.right = null;
		this.children = new Array();
		this.watsonParams = Object.assign({}, watsonParams);
	}

	getDepth() {
		return this.depth;
	}

	getPosition() {
		return this.position;
	}

	getVal() {
		return this.val;
	}

	getParent() {
		return this.parent;
	}

	getLeft() {
		return this.left;
	}

	getRight() {
		return this.right;
	}

	getChild(index) {
		if (index < this.children.length)
			throw Error("Getting child of index " + index + " is invalid.");
		return this.children[index];
	}

	getChildren() {
		return this.children;
	}

	getChildrenSize() {
		return this.children.length;
	}

	getWatsonParams() {
		return this.watsonParams;
	}

	getWatsonParam(id) {
		if (this.watsonParams.hasOwnProperty(id))
			return this.watsonParams[id];
		else
			throw Error("This object does not have parameter \'" + id + "\'");
	}

	setDepth(depth) {
		this.depth = depth;
	}

	setPosition(pos) {
		this.position = pos;
	}

	setVal(val) {
		this.val = val;
	}

	setParent(parent) {
		this.parent = parent;
	}

	setLeft(left) {
		this.left = left;
	}

	setRight(right) {
		this.right = right;
	}

	addChild(child) {
		this.children.push(child);
	}

	//NOTE: Does not update current object values.
	//		However, if the id exists, it will change the
	//		placement of the id within the object.
	addWatsonParam(id, val) {
		var temp = new Map([[id, val]]);
		var tempObj = Object.fromEntries(temp);
		this.watsonParams = Object.assign(tempObj, this.watsonParams);
	}

	setWatsonParam(id, val) {
		if (this.watsonParams.hasOwnProperty(id))
			this.watsonParams[id] = val;
		else
			throw Error("This object does not have parameter \'" + id + "\'");
	}

	setWatsonParams(params) {
		var oldParams = this.watsonParams;
		this.watsonParams = Object.assign({}, params);
		return oldParams;
	}

	extractDepth(val) {
		var temp = val.trim();
		return parseInt(temp.split(",", 1));
	}

	extractPos(val) {
		var temp1 = val.trim() + '';
		var temp2 = temp1.split(":", 1) + '';
		var front = temp2.split(",");
		var ret = front[1].trim();
		return parseInt(ret);
	}

	extractVal(val) {
		var temp1 = val.trim();
		var temp2 = temp1.split(":");
		var cat = '';
		for (var i = 1; i < temp2.length; i++)
			cat = cat.concat(temp2[i]);
		return cat.trim();
	}
	
}(TreeNode || (TreeNode = {}));
module.exports = TreeNode;