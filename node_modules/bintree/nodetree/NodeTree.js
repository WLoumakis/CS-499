var TreeNode = require('bintree/treenode/TreeNode');

class NodeTree {

	constructor() {
		this.root = null;
		this.size = 0;
		this.depth = 0;
	}

	getRoot() {
		return this.root;
	}

	getSize() {
		return this.size;
	}

	getDepth() {
		return this.depth;
	}

	setRoot(root) {
		this.root = root;
	}

	setSize(size) {
		this.size = size;
	}

	setDepth(depth) {
		this.depth = depth;
	}

	// Prefers inserting left if there is a tie
	insertionHelper(root, node, depth) {
		if (root == null || depth > node.getDepth()) return;
		if (root.getLeft() == null && node.getPosition() == 0 && depth == node.getDepth()) {
			root.setLeft(node);
			node.setParent(root);
			return node;
		}
		if (root.getRight() == null && node.getPosition() == 1 && depth == node.getDepth()) {
			root.setRight(node);
			node.setParent(root);
			return node;
		}
		this.insertionHelper(root.getLeft(), node, depth + 1);
		this.insertionHelper(root.getRight(), node, depth + 1);
	}

	insert(node) {
		var ret;
		if (this.size == 0) {
			this.root = node;
			this.size++;
			ret = node;
		}
		else {
			ret = this.insertionHelper(this.root, node, 1);
			this.size++;
			if ((this.depth + 1) == Math.log2(this.size)) {
				this.depth++;
			}
		}
		return ret;
	}

	displayPreorderHelper(node) {
		if (node != null) {
			console.log('(' + node.getDepth() + ',' + node.getPosition() + '): ' + node.getVal());
			this.displayPreorderHelper(node.getLeft());
			this.displayPreorderHelper(node.getRight());
		}
	}
	
	displayPreorder() {
		console.log('Pre Order Tree:');
		this.displayPreorderHelper(this.root);
	}

	displayInorderHelper(node) {
		if (node != null) {
			this.displayInorderHelper(node.getLeft());
			console.log('(' + node.getDepth() + ',' + node.getPosition() + '): ' + node.getVal());
			this.displayInorderHelper(node.getRight());
		}
	}

	displayInorder() {
		console.log('In Order Tree:');
		this.displayInorderHelper(this.root);
	}

	displayPostorderHelper(node) {
		if (node != null) {
			this.displayPostorderHelper(node.getLeft());
			this.displayPostorderHelper(node.getRight())
			console.log('(' + node.getDepth() + ',' + node.getPosition() + '): ' + node.getVal());
		}
	}

	displayPostorder() {
		console.log('Post Order Tree:');
		this.displayPostorderHelper(this.root);
	}

}(NodeTree || (NodeTree = {}));
module.exports = NodeTree;